{
	"Boilerplate": {
		"prefix": "!tsqlt_test",
		"body": [
			"/*",
			"Description: Description",
			"--------------------------------------------------------------------------",
			"CHANGE HISTORY: see git log",
			"*/\n",
			"CREATE PROCEDURE [schemaName].[test ChangeME]",
			"AS\n",
			"     DECLARE @Debug BIT=",
			"     (",
			"         SELECT CASE",
			"                    WHEN coalesce(IsDebug,0) =1",
			"                    THEN 1",
			"                    ELSE 0",
			"                END",
			"         FROM tSQLt.DebugTests",
			"     );\n",
			"\t --Arrange",
			"\t--Setup our fake tables that are specific to this test",
			"\t--You can also fake/insert data in the tSQLt class setup procedures, so keep that in mind when inserting data here",
			"\tEXEC tSQLt.FakeTable '[dbo].[TableThatMyObjectUses]';\n",
			"\tINSERT INTO [dbo].[TableThatMyObjectUses] ([TableKey],[column2])",
			"\tValues",
			"\t(1,'string value')",
			"\t,(2,'string value')\n",
			"\t--Act",
			"\t-Exercise the functionality you are testing (IE execute your stored proc with the parameters needed for the test, query your view with proper where critera for the test)",
			"\t--Here you are structureing the response into a temp table that will be used in the next step to actually check the value that are returned against what you expect.\n",
			"\tcreate table #actual(TableKey bigint)\n",
			"\tselect TableKey ",
			"\tinto #actuall",
			"\tfrom",
			"\tMyReportView",
			"\tgroup by TableKey",
			"\thaving count(*) > 1\n",
			"\t--Assert",
			"\t--Create the #expected table, which will contain what the results from your object should be",
			"\t--This is where it actually tests if A = B. The most common way is to check if 2 temp tables are equivelent, but there are other assertations you can make.\n",
			"\tcreate table #expected(TableKey bigint)\n",
			"\tEXEC tSQLt.AssertEqualsTable \n",
			"\t\t'#Expected',",
			"\t\t'#Actual';",
		],
		"description": "Create an tsqlt unit test"
	}
}